/* public/style.css */
html, body, #root {
  height: 100%;
  margin: 0;
  font-family: 'Roboto', sans-serif;
}
#root {
  display: flex; /* Use flexbox for layout if desired */
  flex-direction: column; /* Or 'row' depending on your layout */
  position: relative; /* Make #root a positioning context for #controls */
}
/* This is the div from App.tsx */
#canvas-container {
  flex-grow: 1; /* Allows it to take up available space in a flex container */
  width: 100%;
  /* For non-flex layout, you might need explicit height: */
  /* height: calc(100vh - 100px); /* Example: full viewport height minus some space for controls */
  min-height: 300px; /* Ensure it has at least some height */
  background-color: #111; /* Temporary background to see its bounds */
  position: relative; /* Good for positioning things inside it later if needed */
}
/* Ensure the host for the Three.js canvas also behaves correctly */
#orbital-canvas-host {
  width: 100%;
  height: 100%;
  position: relative; /* Important for absolute positioning of canvas */
  display: block; /* Important for canvas to behave like a block element */
}
#controls {
  position: absolute; /* Position absolutely within #root */
  top: 20px;          /* Distance from the top */
  left: 20px;         /* Distance from the left */
  width: fit-content; /* Constrain width to its content */
  height: fit-content;/* Constrain height to its content */
  padding: 15px; /* Added a bit more padding */
  /* Make the background semi-transparent */
  /* Adjust the alpha (last value) for more/less transparency */
  /* e.g., 0.7 is 70% opaque, 0.5 is 50% opaque */
  background-color: rgba(240, 240, 240, 0.85); /* Light grey with 85% opacity */
  border-radius: 8px; /* Optional: add some rounded corners */
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Optional: subtle shadow */
  z-index: 10; /* Ensure it's above the canvas container if they overlap */
  
  /* Use flexbox to align children to the right */
  display: flex;
  flex-direction: column; /* Stack control groups vertically */
  /* align-items: flex-end; */  /* Align items (control groups) to the right - commented out */
}
.control-group {
  margin-bottom: 12px; /* Increased margin for better spacing */
  display: flex; /* Allow label and input to align nicely */
  align-items: center; /* Vertically align label and input */
  justify-content: flex-end; /* Right-aligns the label and input within the group */
  width: auto; /* Allow the group to shrink to its content if needed */
}
.control-group label {
  margin-right: 10px; /* Space between label and input */
  font-weight: 500; /* Slightly bolder labels */
}

/* Optional: Style inputs and selects for consistency */
#controls select,
#controls input[type="number"] {
  padding: 6px 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

/* Set specific widths for numeric inputs to prevent them from being too long */
#controls #z-input,
#controls #rMax-input,
#controls #iso-level-input {
  width: 80px; /* Adjust as needed, includes space for steppers */
}

#controls select {
  min-width: 100px; /* Give selects a bit more base width */
}

#controls button#update-orbital {
  padding: 8px 15px;
  background-color: #3498db;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.2s ease;
}

#controls button#update-orbital:hover {
  background-color: #2980b9;
}
button:hover {
    background-color: #0056b3;
}


#loading-spinner {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(255, 255, 255, 0.95);
  padding: 25px;
  border-radius: 10px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.2);
  z-index: 10000; /* Very high z-index */
  display: flex;
  flex-direction: column;
  align-items: center;
  color: #333;
}

.spinner {
  border: 5px solid #e0e0e0; /* Light grey */
  border-top: 5px solid #3498db; /* Blue */
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin-bottom: 15px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
